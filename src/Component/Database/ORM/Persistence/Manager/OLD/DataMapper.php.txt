<?php
namespace Laventure\Component\Database\ORM\Persistence;

use DateTimeInterface;
use Laventure\Component\Database\ORM\Collection\Collection;
use Laventure\Component\Database\ORM\Persistence\Mapper\Mapper;



/**
 * @inheritdoc
*/
class DataMapper extends Mapper
{


    /**
     * @var EntityManager
    */
    protected EntityManager $em;




    /**
     * @var PersistenceCollection
    */
    protected PersistenceCollection $collection;



    /**
     * @var array
    */
    protected array $attributes = [];





    /**
     * @var array
    */
    protected array $mapping = [
        'identifier' => '',
        'attributes' => [],
        'hasMany'    => [],
        'belongTo'   => []
    ];






    /**
     * @param EntityManager $em
    */
    public function __construct(EntityManager $em)
    {
         $this->em = $em;
         $this->collection = new PersistenceCollection($this->em);
    }








    /**
     * @inheritDoc
    */
    public function find($id): ?object
    {

    }





    /**
     * @inheritDoc
    */
    public function save(object $object): int
    {

    }




    /**
     * @inheritDoc
    */
    public function delete(object $object): int
    {

    }






    /**
     * @inheritDoc
    */
    public function mapRows(object $object): mixed
    {
        $reflection = new \ReflectionObject($object);
        $metadata   = $this->em->getClassMetadata(get_class($object));

        foreach ($reflection->getProperties() as $property) {

            $column = $property->getName();
            $value  = $property->getValue($object);

            if ($metadata->isIdentifier($column)) {
                 $this->mapping[$column] = $value;
            } elseif ($value instanceof DateTimeInterface) {
                $this->mapping['attributes'][$column] = $value->format('Y-m-d H:i:s');
            } elseif ($value instanceof Collection) {
                $this->mapping['hasMany'][$column] = $value;
            } elseif (is_object($value)) {
                $this->mapping['belongTo'][$column] = $value;
            } else {
                $this->mapping['attributes'][$column] = $value;
            }
        }

        return $this;
    }







    /**
     * @param array $data
     *
     * @return object
    */
    protected function fromState(array $data): object
    {
          return $this;
    }
}