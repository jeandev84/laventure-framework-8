<?php
namespace Laventure\Component\Database\ORM\Persistence\Mapping;


use Laventure\Component\Database\ORM\Collection\Collection;
use Laventure\Component\Database\ORM\Persistence\EntityPropertyResolver;
use ReflectionClass;
use ReflectionObject;


/**
 * @inheritdoc
*/
class ClassMetadata implements ClassMetadataInterface
{


        use EntityPropertyResolver;




        /**
        * @var ReflectionClass
        */
        protected ReflectionClass $reflection;



        /**
        * @var string|object
        */
        protected string|object $classname;




        /**
         * @var string
        */
        protected string $table;





        /**
         * @var string
        */
        protected string $identifier = 'id';




        /**
         * @var array
        */
        protected array $associations = [];




       /**
        * @param string|object $classname
        *
        * @param string $table
       */
       public function __construct(string|object $classname, string $table = '')
       {
           $this->classname = $classname;
           $this->table     = $table;

           /*
           try {

               $reflection        =  new ReflectionClass($classname);
               $shortName         =  $reflection->getShortName();
               $this->table       = $table ?: mb_strtolower("{$shortName}s");
               $this->reflection  = $reflection;

           } catch (\Exception $e) {
                trigger_error($e->getMessage());
           }
           */
       }






       /**
        * @inheritDoc
       */
       public function getClassname(): string
       {
           if (is_object($this->classname)) {
               return $this->getReflection()->getName();
           }

           return $this->classname;
       }






       /**
        * @inheritDoc
       */
       public function getTableName(): string
       {
           $reflection  = $this->getReflection();
           $shortName   =  $reflection->getShortName();
           return $this->table ?: mb_strtolower("{$shortName}s");
       }





       /**
        * @inheritdoc
       */
       public function getReflection(): ReflectionObject|ReflectionClass
       {
           return $this->createReflection($this->classname);
       }






       /**
        * @param string|object $context
        *
        * @return ReflectionClass|ReflectionObject
        *
        * @throws \ReflectionException
       */
       private function createReflection(string|object $context): ReflectionObject|ReflectionClass
       {
           return is_object($context) ? new ReflectionObject($context) : new ReflectionClass($context);
       }






      /**
       * @inheritDoc
      */
      public function getIdentifier(): string
      {
           return $this->identifier;
      }





      /**
       * @inheritDoc
      */
      public function isIdentifier(string $field): bool
      {
          if (! $this->hasField($field)) {
               return false;
          }

          return $this->getIdentifier() === $field;
      }






      /**
       * @inheritDoc
      */
      public function getFieldNames(): array
      {
          $columns = [];

          foreach ($this->getReflection()->getProperties() as $property) {
              $columns[] = $property->getName();
          }

          return $columns;
      }





      /**
       * @inheritDoc
      */
      public function hasField(string $field): bool
      {
           return in_array($field, $this->getFieldNames());
      }





      /**
       * @inheritDoc
      */
      public function hasAssociation(string $field): bool
      {
           if (! $this->hasField($field)) {
               return false;
           }

           dd($this->getReflection());
      }






     /**
      * @inheritDoc
     */
     public function isSingleValueAssociation(string $field): bool
     {

     }




     /**
      * @inheritDoc
     */
     public function isCollectionValueAssociation(string $field): bool
     {
          if (! $this->hasField($field)) {
              return false;
          }
     }





    /**
     * @inheritDoc
    */
    public function getIdentifierValues(object $object): array
    {
        $fields = [];

        $reflection = $this->createReflection($object);

        foreach ($reflection->getProperties() as $property) {

            $column = $property->getName();
            $value  = $property->getValue($object);

            if ($value instanceof Collection) {
                $fields['association'][$column] = $value;
            } elseif (is_object($value)) {
                $fields['association'][$column] = $value;
            }

            $fields['attributes'][$column] = $value;
        }


        return $fields;
    }





    /**
     * @inheritdoc
    */
    public function getMethods(): array
    {
        $methods = [];

        foreach ($this->reflection->getMethods() as $method) {
           $methods[] = $method->getName();
        }

        return $methods;
    }






    /**
     * @inheritdoc
    */
    public function hasMethod(string $name): bool
    {
        return in_array($name, $this->getMethods());
    }
}